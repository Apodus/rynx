<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharpmake.Generators</name>
    </assembly>
    <members>
        <member name="M:Sharpmake.Generators.FastBuild.Bff.IsObjectList(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Method that allows to determine for a specified dependency if it's a library or an object list. if a dep is within
            the list, the second condition check if objects is present which means that the current dependency is considered to be
            a force objectlist.
            </summary>
            <param name="dependencies">all the dependencies of a specific project configuration</param>
            <param name="dep">additional dependency clear of additional suffix</param>
            <returns>return boolean value of presence of a dep within the containing dependencies list</returns>
        </member>
        <member name="T:Sharpmake.Generators.FastBuild.IClangPlatformBff">
            <summary>
            Augments the <see cref="T:Sharpmake.Generators.FastBuild.IPlatformBff"/> interface to provide services for platforms that
            are based on Clang.
            </summary>
        </member>
        <member name="T:Sharpmake.Generators.FastBuild.IMicrosoftPlatformBff">
            <summary>
            Augments the <see cref="T:Sharpmake.Generators.FastBuild.IPlatformBff"/> interface to provide services for Microsoft's
            proprietary platforms.
            </summary>
        </member>
        <member name="T:Sharpmake.Generators.FastBuild.IPlatformBff">
            <summary>
            Interface that exposes the required methods and properties to generate a .bff file for
            FastBuild using Sharpmake.
            </summary>
        </member>
        <member name="P:Sharpmake.Generators.FastBuild.IPlatformBff.BffPlatformDefine">
            <summary>
            Gets the main `#define` symbol for that platform in the BFF file.
            </summary>
            <remarks>
            Note that this is *NOT* the C or C++ define symbol. The BFF scripts support the
            `#define` instruction, and this property returns a symbol that tells the scripts
            whether we're dealing with a given platform.
            </remarks>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.CConfigName(Sharpmake.Configuration)">
            <summary>
            Gets a configuration name for that platform in the .bff file for the code files that
            are written in native C code.
            </summary>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.CppConfigName(Sharpmake.Configuration)">
            <summary>
            Gets a configuration name for that platform in the .bff file for the code files that
            are written in native C++ code.
            </summary>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.AddLibPrefix(Sharpmake.Configuration)">
            <summary>
            Gets whether a library prefix (usually `lib`) is required on that platform when
            building libraries.
            </summary>
            <param name="conf">The <see cref="T:Sharpmake.Configuration"/> under which the check is requested.</param>
            <returns>`true` if a prefix is required, `false` otherwise.</returns>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.SetupExtraLinkerSettings(Sharpmake.Generators.IFileGenerator,Sharpmake.Project.Configuration,System.String)">
            <summary>
            Setups extra linker settings for linking with that platform.
            </summary>
            <param name="fileGenerator">A <see cref="T:Sharpmake.Generators.IFileGenerator"/> for writing the file.</param>
            <param name="configuration">The project configuration</param>
            <param name="fastBuildOutputFile">The file name of the build output.</param>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.GetExtraPostBuildEvents(Sharpmake.Project.Configuration,System.String)">
            <summary>
            Get the extra list of build steps to execute for this platform.
            </summary>
            <param name="configuration">The project configuration</param>
            <param name="fastBuildOutputFile">The file name of the build output.</param>
            <returns>The list of post build step to execute.</returns>
        </member>
        <member name="M:Sharpmake.Generators.FastBuild.IPlatformBff.GetOutputFilename(Sharpmake.Project.Configuration.OutputType,System.String)">
            <summary>
            Get the linker output name for this platform.
            </summary>
            <param name="outputType">The project output type</param>
            <param name="fastBuildOutputFile">The original file name of the build output.</param>
            <returns>The final file name of the build output.</returns>
        </member>
        <member name="T:Sharpmake.Generators.FileGeneratorUtilities">
            <summary>
            Utilities for file generation.
            </summary>
        </member>
        <member name="F:Sharpmake.Generators.FileGeneratorUtilities.RemoveLineTag">
            <summary>
            A string that, when put on a line of a file during generation, will cause the line to
            be removed from the generated files.
            </summary>
        </member>
        <member name="T:Sharpmake.Generators.Generic.Makefile">
             <summary>
            
             </summary>
        </member>
        <member name="M:Sharpmake.Generators.Generic.Makefile.ValidateSolutionConfigurations(Sharpmake.Solution,System.Collections.Generic.List{Sharpmake.Solution.Configuration})">
            <summary>
            Validate that all solution configurations meet the requirements of the generator.
            </summary>
            <exception cref="T:Sharpmake.Error">The solution contains an invalid configuration.</exception>
        </member>
        <member name="M:Sharpmake.Generators.Generic.Makefile.ValidateProjectConfigurations(Sharpmake.Project,System.Collections.Generic.List{Sharpmake.Project.Configuration},System.IO.FileInfo)">
            <summary>
            Validate that all project configurations meet the requirements of the generator.
            </summary>
            <exception cref="T:Sharpmake.Error">The project contains an invalid configuration.</exception>
        </member>
        <member name="T:Sharpmake.Generators.IFileGenerator">
            <summary>
            Interface that exposes facilities for generating text-based files.
            </summary>
        </member>
        <member name="P:Sharpmake.Generators.IFileGenerator.Resolver">
            <summary>
            Gets the <see cref="T:Sharpmake.Resolver"/> instance that the generator uses to resolve
            the symbols between square brackets `[...]` when <see cref="M:Sharpmake.Generators.IFileGenerator.Write(System.String)"/> and
            <see cref="M:Sharpmake.Generators.IFileGenerator.WriteLine(System.String)"/> are called.
            </summary>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.Write(System.String)">
            <summary>
            Writes text to the file being generated, resolving the symbols between square brackets
            `[...]` along the way.
            </summary>
            <param name="text">The text to write into the file.</param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.Write(System.String,System.String)">
            <summary>
            Writes text to the file being generated, resolving the symbols between square brackets
            `[...]` along and way. Uses a default value when the resolve process fails.
            </summary>
            <param name="text">The text to write into the file.</param>
            <param name="fallbackValue">A <see cref="T:System.String"/> to use when the resolve fails</param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.WriteLine(System.String)">
            <summary>
            Writes a line of text to the file being generated, resolving the symbols between square
            brackets `[...]` along the way.
            </summary>
            <param name="text">The line of text to write into the file.</param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.WriteLine(System.String,System.String)">
            <summary>
            Writes a line of text to the file being generated, resolving the symbols between square
            brackets `[...]` along the way. Uses a default value when the resolve process fails.
            </summary>
            <param name="text"></param>
            <param name="fallbackValue"></param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.WriteVerbatim(System.String)">
            <summary>
            Writes text to the file being generated as-is, without resolving anything.
            </summary>
            <param name="text">The text to write into the file.</param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.WriteLineVerbatim(System.String)">
            <summary>
            Writes a line of text to the file being generated as-is, without resolving anything.
            </summary>
            <param name="text">The text to write into the file.</param>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.Declare(Sharpmake.VariableAssignment[])">
            <summary>
            Declares one or several variables to be replaced while resolving.
            </summary>
            <param name="variables">An array of <see cref="T:Sharpmake.VariableAssignment"/> instances that designate the variables to replace when resolving.</param>
            <returns>An object that implements <see cref="T:System.IDisposable"/> and will automatically undefine the variable when it's <see cref="M:System.IDisposable.Dispose"/> method is invoked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="variables"/> is null.</exception>
        </member>
        <member name="M:Sharpmake.Generators.IFileGenerator.ResolveEnvironmentVariables(Sharpmake.Platform,Sharpmake.VariableAssignment[])">
            <summary>
            Resolves environment variables in the generated file.
            </summary>
            <param name="platform">The platform whose <see cref="T:Sharpmake.EnvironmentVariableResolver"/> is going to be used by the implementation.</param>
            <param name="variables">An array of <see cref="T:Sharpmake.VariableAssignment"/> containing the variables to resolve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variables"/> is null.</exception>
        </member>
        <member name="T:Sharpmake.Generators.FileGeneratorExtensions">
            <summary>
            Provides extension methods for <see cref="T:Sharpmake.Generators.IFileGenerator"/>.
            </summary>
        </member>
        <member name="M:Sharpmake.Generators.FileGeneratorExtensions.Declare(Sharpmake.Generators.IFileGenerator,System.String,System.Object)">
            <summary>
            Declares one or several variables to be replaced while resolving.
            </summary>
            <param name="fileGenerator">The <see cref="T:Sharpmake.Generators.IFileGenerator"/> instance to use.</param>
            <param name="identifier">The symbol's identifier name.</param>
            <param name="value">The value of the symbol when resolving.</param>
            <returns>An object that implements <see cref="T:System.IDisposable"/> and will automatically undefine the variable when it's <see cref="M:System.IDisposable.Dispose"/> method is invoked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileGenerator"/> or <paramref name="identifier"/> is null.</exception>
        </member>
        <member name="M:Sharpmake.Generators.VisualStudio.CSproj.AddContentGeneratedItem(Sharpmake.Generators.VisualStudio.CSproj.ItemGroups,System.String,System.String,System.String,System.Boolean,System.String,Sharpmake.CSharpProject,System.Boolean)">
            <summary>
            Add the template file and the generated file to the project
            when requested by addGeneratedFile.
            .cs, .xaml and other are threated as different items.
            </summary>
        </member>
        <member name="F:Sharpmake.Generators.VisualStudio.ProjectJson.Template.BeginDependencyItem">
            <remarks>
            See : https://github.com/NuGet/Home/wiki/%5BSpec%5D-Managing-dependency-package-assets#suppress-parent
            </remarks>
        </member>
        <member name="M:Sharpmake.Generators.VisualStudio.UserFileBase.#ctor(System.String)">
            <summary>
            Base class for generating VS user files.
            </summary>
            <param name="projectFilePath">
            Path to the project file. The suffix ".user" will be appended to the file name.
            </param>
        </member>
        <member name="M:Sharpmake.Generators.VisualStudio.Vcxproj.GetProjectFileGuid(System.String,Sharpmake.Project)">
            <summary>
            Generate a pseudo Guid base on relative path from the Project CsPath to the generated files
            Need to do it that way because many vcproj may be generated from the same Project.
            </summary>
        </member>
    </members>
</doc>
